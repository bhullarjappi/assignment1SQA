using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using ConsoleApp8;

namespace UnitTestProject1
{
    [TestClass]
    public class UnitTest1
    {

        // testing to check wheather it is scalene triangle or not
        [TestMethod]
        public void TestMethod1()
        {
            int triangleSide1 = 5, triangleSize2 = 8, triangleSide3 = 4;

            //Arrange
            string expectedOutput = "scalene Triangle";
            //Act
            string actualOutput = TraingleSolver.Analyze(triangleSide1, triangleSize2, triangleSide3);
            //Assert
            Assert.AreEqual(expectedOutput, actualOutput);
            

        }
       // testing to check wheather it is Isosceles triangle or not
        [TestMethod]
        public void TestMethod2()
        {
            int triangleSide1 = 5, triangleSize2 = 5, triangleSide3 =5;
            //Arrange
            string expectedOutput = "Isosceles Triangle";
            //Act
            string actualOutput = TraingleSolver.Analyze(triangleSide1, triangleSize2, triangleSide3);
            //Assert
            Assert.AreEqual(expectedOutput, actualOutput);

        }
        // testing to check wheather it is Equilateral triangle or not

        [TestMethod]
        public void TestMethod3()
        {
            int triangleSide1 = 13, triangleSize2 = 13, triangleSide3 = 6;
            //Arrange
            string expectedOutput = "Equilateral Triangle";
            //Act
            string actualOutput = TraingleSolver.Analyze(triangleSide1, triangleSize2, triangleSide3);
            //Assert
            Assert.AreEqual(expectedOutput, actualOutput);

        }

        // testing to check wheather it is scalene triangle or not
        [TestMethod]
        public void TestMethod4()
        {
            int triangleSide1 = 10, triangleSize2 = 6, triangleSide3 = 7;
            //Arrange
            string expectedOutput = "scalene Triangle";
            //Act
            string actualOutput = TraingleSolver.Analyze(triangleSide1, triangleSize2, triangleSide3);
            //Assert
            Assert.AreEqual(expectedOutput, actualOutput);

        }
        // testing to check wheather it is Isosceles triangle or not
        [TestMethod]
        public void TestMethod5()
        {
            int triangleSide1 = 5, triangleSize2 = 6, triangleSide3 = 5;
            //Arrange
            string expectedOutput = "Isosceles Triangle";
            //Act
            string actualOutput = TraingleSolver.Analyze(triangleSide1, triangleSize2, triangleSide3);
            //Assert
            Assert.AreEqual(expectedOutput, actualOutput);

        }
        // testing to check wheather it is scalene triangle or not
        [TestMethod]
        public void TestMethod6()
        {
            int triangleSide1 = 7, triangleSize2 = 8, triangleSide3 = 9;
            //Arrange
            string expectedOutput = "Scalene Triangle";
            //Act
            string actualOutput = TraingleSolver.Analyze(triangleSide1, triangleSize2, triangleSide3);
            //Assert
            Assert.AreEqual(expectedOutput, actualOutput);

        }

        // testing to check wheather it is scalene triangle or not
        [TestMethod]
        public void TestMethod7()
        {
            int triangleSide1 = 8, triangleSize2 = 5, triangleSide3 = 4;
            //Arrange
            string expectedOutput = "scalene Triangle";
            //Act
            string actualOutput = TraingleSolver.Analyze(triangleSide1, triangleSize2, triangleSide3);
            //Assert
            Assert.AreEqual(expectedOutput, actualOutput);

        }

        // testing to check wheather it is Isosceles triangle or not
        [TestMethod]
        public void TestMethod8()
        {
            int triangleSide1 = 7, triangleSize2 = 7, triangleSide3 = 9;
            //Arrange
            string expectedOutput = "Isosceles Triangle";
            //Act
            string actualOutput = TraingleSolver.Analyze(triangleSide1, triangleSize2, triangleSide3);
            //Assert
            Assert.AreEqual(expectedOutput, actualOutput);

        }
    }
}
